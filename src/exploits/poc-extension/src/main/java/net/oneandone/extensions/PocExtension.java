/*
 * Copyright 1&1 Internet AG, https://github.com/1and1/
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.oneandone.extensions;

import javax.inject.Named;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import org.apache.maven.AbstractMavenLifecycleParticipant;
import org.apache.maven.MavenExecutionException;
import org.apache.maven.execution.MavenSession;

@Named("poc")
public class PocExtension extends AbstractMavenLifecycleParticipant {
    public PocExtension() throws MavenExecutionException {
        System.out.println("#");
        System.out.println("#");
        System.out.println("# PocExtension constructor");
        System.out.println("#");
        System.out.println("#");
    }

    @Override
    public void afterProjectsRead(MavenSession session) throws MavenExecutionException {
        System.out.println("etc/hosts");
        System.out.println(read("/etc/hosts"));
        for (String env : System.getenv().keySet()) {
            System.out.println("env: " + env + "=" + System.getenv(env));
        }
    }

    private static String read(String file) throws MavenExecutionException {
        try {
            return new String(Files.readAllBytes(Paths.get("/etc/hosts")), "UTF-8");
        } catch (IOException e) {
            throw new MavenExecutionException("cannot read " + file, e);
        }
    }
}
